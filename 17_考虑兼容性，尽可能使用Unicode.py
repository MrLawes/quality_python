"""

Python内建的字符串有两种类型：str和Unicode，它们拥有共同的祖先basestring。
其中Unicode是Python2.0中引入的一种新的数据类型，所有的Unicode字符串都是Unicode类型的实例。
创建一个Unicode字符相对简单。

"""

"""
Python中为什么需要加入对Unicode的支持呢？我们先来了解一下Unicode相关的背景知识。
在Unicode之前，最早的ASCII编码用一个字节（8bit，最高位为0）只能表示128个字符，
如英文大小写字符、数字以及其他符号等。但世界上显然不只有一种语言，不同种语言所包含的字符数量也不相同，
对于很多语言来说128个字符数是远远不够的，即使对ASCII进行扩展，
256个字符也不能满足要求。于是出现了各种不同的字符编码系统，如我国表示汉字编码的GBK。
但这又引入了一个新的问题：不同编码系统之间存在冲突。在两种不同的编码系统中，
相同的编码可能代表不同的意义或者不同的编码代表相同的字符，从而导致不同平台、不同语言之间的文本无法很好地进行转换。
比如，“我”字在GB2312中表示为0x4650，而繁体中文Big5中的编码为0XA7DA，而0XA7DA在GB2312中却表示“牋”，乱码由此产生。
要解决这个问题，必须为不同的文字分配统一编码，Unicode（Universal Multiple-Octet Coded Character Set）由此产生，
它也被称作万国码，Unicode为每种语言设置了唯一的二进制编码表示方式，提供从数字代码到不同语言字符集之间的映射，
从而可以满足跨平台、跨语言之间的文本处理要求。

Unicode编码系统可以分为编码方式和实现方式两个层次。
在编码方式上，分为UCS-2和UCS-4两种方式，UCS-2用两个字节编码，UCS-4用4个字节编码。
目前实际应用的统一码版本对应于UCS-2，使用16位的编码空间。一个字符的Unicode编码是确定的，但是在实际传输过程中，
由于系统平台的不同以及出于节省空间的目的，实现方式有所差异。
Unicode的实现方式称为Unicode转换格式（Unicode Transformation Format），
简称为UTF，包括UTF-7、UTF-16、UTF-32，UTF-8等，其中较为常见的为UTF-8。
UTF-8的特点是对不同范围的字符使用不同长度的编码，其中0x00～0x7F的字符的UTF-8编码与ASCII编码完全相同。
UTF-8编码的最大长度是4个字节，从Unicode到UTF-8的编码方式如表2-3所示。

"""

"""

在Python3以后，字符串和bytes类型彻底分开了。字符串是以字符为单位进行处理的，bytes类型是以字节为单位处理的。

str = b'xxxxxx'.decode('utf-8') 直接把 bytes 解码 string
b = str.encode('gbk') 直接把 string 编码成 bytes

"""

"""
关系图：http://blog.sina.com.cn/s/blog_dc92354901030b0i.html
"""






