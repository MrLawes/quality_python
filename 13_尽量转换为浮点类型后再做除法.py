"""
下列场景又变成了浮点数可能是不准确的。先来看以下代码：
"""

import time
from decimal import Decimal

i = 1
while i != 1.5:
    i = i + 0.1
    print(i)
    time.sleep(0.5)
    if i > 3:
        break

"""
上面的代码输出会是多少？正确的答案是这段代码会导致无限循环。
为什么呢？因为在计算机的世界里，浮点数的存储规则决定了不是所有的浮点数都能准确表示，有些是不准确的，
只是无限接近。如0.1转换为二进制表示形式则为0.000110011001……后面1001无限循环。
在内存中根据浮点数位数规定，多余部分直接截断，
因此当循环到第5次的时候i的实际值为1.5000000000000004（读者可以逐步调试进行验证），
则条件表达式i !=1.5显然为True，循环陷入无终止状态。对于浮点数的处理，
要记住其运算结果可能并不是完全准确的。如果计算对精度要求较高，可以使用Decimal来进行处理或者将浮点数尽量扩大为整数，
计算完毕之后再转换回去。而对于在while中使用i!=1.5这种条件表达式更是要避免的，浮点数的比较同样最好能够指明精度。
"""

i = 1
while Decimal(str(i)) != Decimal(str(1.5)):
    i = i + Decimal('0.1')
    print(i)
    time.sleep(0.5)
